{
  "name": "generator-angular",
  "version": "0.2.0",
  "description": "Yeoman generator for AngularJS",
  "keywords": [
    "yeoman-generator",
    "yeoman",
    "generator",
    "framework",
    "component",
    "front-end",
    "app"
  ],
  "homepage": "https://github.com/yeoman/generator-angular",
  "bugs": "https://github.com/yeoman/generator-angular/issues",
  "author": {
    "name": "Chrome Developer Relations"
  },
  "main": "app/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/yeoman/generator-angular.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "dependencies": {
    "yeoman-generator": "~0.10.2"
  },
  "devDependencies": {
    "mocha": "~1.8.1"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "readme": "# AngularJS generator [![Build Status](https://secure.travis-ci.org/yeoman/generator-angular.png?branch=master)](http://travis-ci.org/yeoman/generator-angular)\n\nMaintainer: [Brian Ford](https://github.com/btford)\n\nBased on [angular-seed](https://github.com/angular/angular-seed/)\n\n## Usage\n\nFirst make a new directory, and `cd` into it:\n```\nmkdir my-new-project && cd $_\n```\n\nThen install `generator-angular` and `generator-karma`:\n```\nnpm install generator-angular generator-karma\n```\n\nRun `yo angular`, optionally passing an app name:\n```\nyo angular [app-name]\n```\n\nFinally, install npm and bower dependencies:\n```\nnpm install && bower install --dev\n```\n\n## Generators\n\nAvailable generators:\n\n* [angular](#app) (aka [angular:app](#app))\n* [angular:controller](#controller)\n* [angular:directive](#directive)\n* [angular:filter](#filter)\n* [angular:route](#route)\n* [angular:service](#service)\n* [angular:view](#view)\n\n### App\nSets up a new AngularJS app, generating all the boilerplate you need to get started. The app generator also optionally installs Twitter Bootstrap and additional AngularJS modules, such as angular-resource.\n\nExample:\n```bash\nyo angular\n```\n\n### Route\nGenerates a controller and view, and configures a route in `app/scripts/app.js` connecting them.\n\n### Controller\nGenerates a controller in `app/scripts/controllers`.\n\nExample:\n```bash\nyo angular:controller user\n```\n\nProduces `app/scripts/controllers/user.js`:\n```javascript\nangular.module('myMod').controller('UserCtrl', function ($scope) {\n  // ...\n});\n```\n### Directive\nGenerates a directive in `app/scripts/directives`.\n\nExample:\n```bash\nyo angular:directive myDirective\n```\n\nProduces `app/scripts/directives/myDirective.js`:\n```javascript\nangular.module('myMod').directive('myDirective', function () {\n  return {\n    template: '<div></div>',\n    restrict: 'E',\n    link: function postLink(scope, element, attrs) {\n      element.text('this is the myDirective directive');\n    }\n  };\n});\n```\n\n### Filter\nGenerates a filter in `app/scripts/filters`.\n\nExample:\n```bash\nyo angular:filter myFilter\n```\n\nProduces `app/scripts/filters/myFilter.js`:\n```javascript\nangular.module('myMod').filter('myFilter', function () {\n  return function (input) {\n    return 'myFilter filter:' + input;\n  };\n});\n```\n\n### View\nGenerates an HTML view file in `app/views`.\n\nExample:\n```bash\nyo angular:view user\n```\n\nProduces `app/views/user.html`:\n```html\n<p>This is the user view</p>\n```\n\n### Service\nGenerates an AngularJS service.\n\nExample:\n```bash\nyo angular:service myService\n```\n\nProduces `app/scripts/services/myService.js`:\n```javascript\nangular.module('myMod').factory('myService', function () {\n  // ...\n});\n```\n\n#### Options\nThere are options for each of the methods for registering services. For more on using these services, see the [module API AngularJS documentation](http://docs.angularjs.org/api/angular.Module).\n\n##### Factory\nInvoked with `--factory`\n\nThis is the default method when creating a service. Running `yo angular:service myService --factory` is the same as running `yo angular:service myService`\n\n##### Service\nInvoked with `--service`\n\n##### Value\nInvoked with `--value`\n\n##### Constant\nInvoked with `--constant`\n\n## Options\nIn general, these options can be applied to any generator, though they only affect generators that produce scripts.\n\n### CoffeeScript\nFor generators that output scripts, the `--coffee` option will output CoffeeScript instead of JavaScript.\n\nFor example:\n```bash\nyo angular:controller user --coffee\n```\n\nProduces `app/scripts/controller/user.coffee`:\n```coffeescript\nangular.module('myMod')\n  .controller 'UserCtrl', ($scope) ->\n```\n\nA project can mix CoffeScript and JavaScript files.\n\n### Minification Safe\nBy default, generators produce unannotated code. Without annotations, AngularJS's DI system will break when minified. Typically, these annotations the make minification safe are added automatically at build-time, after application files are concatenated, but before they are minified. By providing the `--minsafe` option, the code generated will out-of-the-box be ready for minification. The trade-off is between amount of boilerplate, and build process complexity.\n\n#### Example\n```bash\nyo angular:controller user --minsafe\n```\n\nProduces `app/controller/user.coffee`:\n```javascript\nangular.module('myMod').controller('UserCtrl', ['$scope', function ($scope) {\n  // ...\n}]);\n```\n\n#### Background\nUnannotated:\n```javascript\nangular.module('myMod').controller('MyCtrl', function ($scope, $http, myService) {\n  // ...\n});\n```\n\nAnnotated:\n```javascript\nangular.module('myMod').controller('MyCtrl',\n  ['$scope', '$http', 'myService', function ($scope, $http, myService) {\n\n    // ...\n  }]);\n```\n\nThe annotations are important because minified code will rename variables, making it impossible for AngularJS to infer module names based solely on function parameters.\n\nThe recommended build process uses `ngmin`, a tool that automatically adds these annotations. However, if you'd rather not use `ngmin`, you have to add these annotations manually yourself.\n\n## Bower Components\n\nThe following packages are always installed by the [app](#app) generator:\n\n* angular\n* angular-mocks\n* angular-scenario\n\n\nThe following additional modules are available as components on bower, and installable via `bower install`:\n\n* angular-cookies\n* angular-loader\n* angular-resource\n* angular-sanitize\n\nAll of these can be updated with `bower update` as new versions of AngularJS are released.\n\n## Configuration\nYeoman generated projects can be further tweaked according to your needs by modifying project files appropriately.\n\n### Output\nYou can change the `app` directory by adding a `appPath` property to `component.json`. For instance, if you wanted to easily integrate with Express.js, you could add the following:\n\n```json\n{\n  \"name\": \"yo-test\",\n  \"version\": \"0.0.0\",\n  ...\n  \"appPath\": \"public\"\n}\n\n```\nThis will cause Yeoman-generated client-side files to be placed in `public`.\n\n## Testing\n\nFor tests to work properly, karma needs the `angular-mocks` bower package.\nThis script is included in the component.json in the `devDependencies` section, which will\nbe available very soon, probably with the next minor release of bower.\n\nWhile bower `devDependencies` are not yet implemented, you can fix it by running:\n```bash\nbower install angular-mocks\n```\n\nBy running `grunt test` you should now be able to run your unit tests with karma.\n\n## Contribute\n\nSee the [contributing docs](https://github.com/yeoman/yeoman/blob/master/contributing.md)\n\nWhen submitting an issue, please follow the [guidelines](https://github.com/yeoman/yeoman/blob/master/contributing.md#issue-submission). Especially important is to make sure Yeoman is up-to-date, and providing the command or commands that cause the issue.\n\nWhen submitting a bugfix, write a test that exposes the bug and fails before applying your fix. Submit the test alongside the fix.\n\nWhen submitting a new feature, add tests that cover the feature.\n\n## License\n\n[BSD license](http://opensource.org/licenses/bsd-license.php)\n",
  "readmeFilename": "readme.md",
  "_id": "generator-angular@0.2.0",
  "dist": {
    "shasum": "d0e32fd646e2154684d1d9d2ef5b0aaa402cff3a"
  },
  "_from": "generator-angular"
}
